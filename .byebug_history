quit
person.errors.full_messages
person.errors
person.valid?
person.errors.full_messages
person.errors
person = Person2.new
person = Person.new
quit
person.errors
person = Person2.new
quit
person.errors
person = Person2.new
quit
person.errors.full_messages
person.valid?
person.errors
person.errors.full_messages
person = Person2.new
quit
person.errors.all.map { |e| atr, erro = *e }
person.errors.all.each { |e| puts e.key }
person.errors.all.each { |e| attr, errors = *e; puts attr }
person.errors.all
perosn.errors.all
person.errors
person.errors.all.map { |e| puts e }
person.errors.full_messages
person.valid?
person = Person2.new
quit
person.errors.full_messages
person.valid?
person = Person2.new
quit
error
person.errors.full_messages
person.valid?
person = Person2.new
quit
person.errors.full_messages
person.errors
person.valid?
person = Person2.new
quit
person.errors.full_messages
person.valid?
person = Person2.new
quit
person.errors.full_messages
person.valid?
person = Person2.new
quit
y
quit
person.errors.full_messages
person.errors
person.valid?
person = Person2.new
quit
person.errors.full_messages
person.errors
person.valid?
person = Person2.new
quit
person.errors
person.valid?
person = Person2.new
quit
person = Person.new
c
Dir.glob(project_root + '/lib/object_validator/checks/*') { |file| require file }
project_root = File.dirname(File.absolute_path(__FILE__))
c
Dir.glob(project_root + '/lib/object_validator/checks/*') { |file| puts file }
project_root = File.dirname(File.absolute_path(__FILE__))
quit
Dir.glob(project_root + '/lib/object_validator/checks/*') { |file| puts file }
c
Dir.glob(project_root + '/lib/object_validator/checks/*') { |file| require file }
c
require '/home/nsweeting/Documents/test/object_validator/lib/object_validator/checks/presence.rb'
Dir.glob(project_root + '/lib/object_validator/checks/*') { |file| puts file }
Dir.glob(project_root + '/lib/object_validator/checks/*') { |file| require file }
Dir.glob(project_root + '/lib/object_validator/checks/*') { |file| puts file; require file }
project_root = File.dirname(File.absolute_path(__FILE__))
quit
Dir.glob(project_root + '/lib/object_validator/checks/*') { |file| puts file; require file }
Dir.glob(project_root + '/lib/object_validator/checks/*') { |file| byebug; require file }
project_root + '/lib/object_validator/checks/'
project_root = File.dirname(File.absolute_path(__FILE__))
quit
project_root + '/lib/checks/'
project_root = File.dirname(File.absolute_path(__FILE__))
project_root + '/lib/checks/'
Dir.glob(project_root + '/lib/checks/*') { |file|  require file }
project_root = File.dirname(File.absolute_path(__FILE__))
quit
project_root = File.dirname(File.absolute_path(__FILE__))
c
@errors
klass.new(@object, @errors, name, check.last).call
check.last
quit
klass.new(@object, @errors, name, checks[key.last]).call
quit
check = Object.const_get("ObjectValidator::Checks::#{klass}")
klass = key.first.to_s.split('_').collect(&:capitalize).join
quit
checks
name
key
c
person.errors
person.valid?
c
person.errors
person.valid?
quit
presence = object.send(name).nil? || object.respond_to?(:empty?) && object.empty?
options[:presence]
object.send(name)
c
object.send(name)
quit
person.valid?
c
quit
person.errors
person.valid?
quit
person.errors
person.valid?
quit
person.errors
person.valid?
quit
person.valid?
quit
person.valid?
